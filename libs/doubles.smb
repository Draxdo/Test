//      Standard Doubles library for SembleLang v1.0.0 to ?
//      -------------------------------
//        Dependencies are as follows
//
//          - SembleLang v1+
//          - Access to libc (default compilation)
//          - Semble "base.smb"
//          - Semble "vector.smb"
//       
//        This library is under the same license as SembleLang itself, as it comes with the language.
//        This liscense being the MIT license:    
//        
// MIT License
//
// Copyright (c) 2021 dunderstab
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//        
//        That is all, here is the code.
//
//          - dunder @ SembleLang Team

// Imports

#include base.smb
#include vector.smb

// Structs

//
//  The "Double" Struct is a dummy struct that 
//  tricks the compiler into thinking that the
//  datatype is an struct so we can use custom
//  operators with Doubles. It returns a value
//  that is a double as its value.
//

new struct Double {
    n
}

// Double Constructor

fn Double(v) => {
    return v;
}

// Double Operators

fn Double__add__()